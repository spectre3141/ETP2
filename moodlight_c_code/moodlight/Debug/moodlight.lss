
moodlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  0000040c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea7  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fa  00000000  00000000  00001ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000027f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c1  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_18>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 32       	cpi	r26, 0x22	; 34
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  d4:	0c 94 ca 01 	jmp	0x394	; 0x394 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <alarm_initPWM>:
#define INIT_CH2 ((uint8_t)(0xFF-INIT_CH1))

void alarm_initPWM(void)
{
	//Configure pins as output
	DDRD |= (1<<DDRD6) | (1<<DDRD5);	//PD5 and PD6 => output
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	80 66       	ori	r24, 0x60	; 96
  e0:	8a b9       	out	0x0a, r24	; 10
	//Timer 0 is used to generate the alarm sound
	//Reset timer register
	TCCR0A = 0;
  e2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
  e4:	15 bc       	out	0x25, r1	; 37
	
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1);
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	80 6a       	ori	r24, 0xA0	; 160
  ea:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);						//Phase correct PWM
  ec:	84 b5       	in	r24, 0x24	; 36
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00) | (1<<CS01);			//Prescaler = 64;
  f2:	85 b5       	in	r24, 0x25	; 37
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = INIT_CH1;
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	87 bd       	out	0x27, r24	; 39
	OCR0B = INIT_CH2;
  fc:	80 ec       	ldi	r24, 0xC0	; 192
  fe:	88 bd       	out	0x28, r24	; 40
 100:	08 95       	ret

00000102 <LED_initPWM>:
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	87 60       	ori	r24, 0x07	; 7
 106:	8a b9       	out	0x0a, r24	; 10
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	84 b9       	out	0x04, r24	; 4
 10e:	5a 9a       	sbi	0x0b, 2	; 11
 110:	a0 e9       	ldi	r26, 0x90	; 144
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	1c 92       	st	X, r1
 116:	e1 e9       	ldi	r30, 0x91	; 145
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	10 82       	st	Z, r1
 11c:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
 120:	8c 91       	ld	r24, X
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8c 93       	st	X, r24
 126:	8c 91       	ld	r24, X
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	8c 93       	st	X, r24
 12c:	80 81       	ld	r24, Z
 12e:	88 61       	ori	r24, 0x18	; 24
 130:	80 83       	st	Z, r24
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 140:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 14c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 150:	a0 e8       	ldi	r26, 0x80	; 128
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	1c 92       	st	X, r1
 156:	e1 e8       	ldi	r30, 0x81	; 129
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
 15c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 160:	8c 91       	ld	r24, X
 162:	80 6a       	ori	r24, 0xA0	; 160
 164:	8c 93       	st	X, r24
 166:	8c 91       	ld	r24, X
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	8c 93       	st	X, r24
 16c:	80 81       	ld	r24, Z
 16e:	88 61       	ori	r24, 0x18	; 24
 170:	80 83       	st	Z, r24
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
 178:	4f ef       	ldi	r20, 0xFF	; 255
 17a:	5f e0       	ldi	r21, 0x0F	; 15
 17c:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 180:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 184:	84 e4       	ldi	r24, 0x44	; 68
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 190:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 194:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 198:	a0 ea       	ldi	r26, 0xA0	; 160
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	1c 92       	st	X, r1
 19e:	e1 ea       	ldi	r30, 0xA1	; 161
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	10 82       	st	Z, r1
 1a4:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
 1a8:	2c 91       	ld	r18, X
 1aa:	20 6a       	ori	r18, 0xA0	; 160
 1ac:	2c 93       	st	X, r18
 1ae:	2c 91       	ld	r18, X
 1b0:	22 60       	ori	r18, 0x02	; 2
 1b2:	2c 93       	st	X, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	28 61       	ori	r18, 0x18	; 24
 1b8:	20 83       	st	Z, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	21 60       	ori	r18, 0x01	; 1
 1be:	20 83       	st	Z, r18
 1c0:	50 93 a7 00 	sts	0x00A7, r21	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 1c4:	40 93 a6 00 	sts	0x00A6, r20	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 1c8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1cc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 1d0:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 1d4:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 1d8:	08 95       	ret

000001da <LED_setValue>:
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	91 f0       	breq	.+36     	; 0x202 <LED_setValue+0x28>
 1de:	18 f4       	brcc	.+6      	; 0x1e6 <LED_setValue+0xc>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <LED_setValue+0x16>
 1e4:	08 95       	ret
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	a9 f0       	breq	.+42     	; 0x214 <LED_setValue+0x3a>
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	e1 f0       	breq	.+56     	; 0x226 <LED_setValue+0x4c>
 1ee:	08 95       	ret
 1f0:	84 e1       	ldi	r24, 0x14	; 20
 1f2:	68 9f       	mul	r22, r24
 1f4:	b0 01       	movw	r22, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1fc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 200:	08 95       	ret
 202:	84 e1       	ldi	r24, 0x14	; 20
 204:	68 9f       	mul	r22, r24
 206:	b0 01       	movw	r22, r0
 208:	11 24       	eor	r1, r1
 20a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 20e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 212:	08 95       	ret
 214:	84 e1       	ldi	r24, 0x14	; 20
 216:	68 9f       	mul	r22, r24
 218:	b0 01       	movw	r22, r0
 21a:	11 24       	eor	r1, r1
 21c:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 220:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 224:	08 95       	ret
 226:	84 e1       	ldi	r24, 0x14	; 20
 228:	68 9f       	mul	r22, r24
 22a:	b0 01       	movw	r22, r0
 22c:	11 24       	eor	r1, r1
 22e:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 232:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 236:	08 95       	ret

00000238 <main>:
int main(void)
{
	int counter = 0;
	int dir = 1;
	
	LED_initPWM();
 238:	0e 94 81 00 	call	0x102	; 0x102 <LED_initPWM>
	alarm_initPWM();
 23c:	0e 94 6e 00 	call	0xdc	; 0xdc <alarm_initPWM>
	UART_init();
 240:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_init>
#define F_CPU 8000000UL

int main(void)
{
	int counter = 0;
	int dir = 1;
 244:	01 e0       	ldi	r16, 0x01	; 1
 246:	10 e0       	ldi	r17, 0x00	; 0

#define F_CPU 8000000UL

int main(void)
{
	int counter = 0;
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			dir = -1;
		}
		else if (counter <= 0x00)
		{
			dir = 1;
 24c:	cc 24       	eor	r12, r12
 24e:	c3 94       	inc	r12
 250:	d1 2c       	mov	r13, r1
			LED_setValue(CH4, counter);*/
		}
		counter = counter + dir;
		if (counter >= 200)
		{
			dir = -1;
 252:	ee 24       	eor	r14, r14
 254:	ea 94       	dec	r14
 256:	ff 24       	eor	r15, r15
 258:	fa 94       	dec	r15
 25a:	02 c0       	rjmp	.+4      	; 0x260 <main+0x28>
 25c:	0e 2d       	mov	r16, r14
 25e:	1f 2d       	mov	r17, r15
	alarm_initPWM();
	UART_init();
	
    while (1) 
    {
		if ((counter <= 0xFF) && (counter >= 0x00))
 260:	cf 3f       	cpi	r28, 0xFF	; 255
 262:	d1 05       	cpc	r29, r1
 264:	09 f0       	breq	.+2      	; 0x268 <main+0x30>
 266:	48 f4       	brcc	.+18     	; 0x27a <main+0x42>
		{
			UART_sendByte((uint8_t) (0x30));
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	0e 94 86 01 	call	0x30c	; 0x30c <UART_sendByte>
			UART_sendByte((uint8_t) (0x1));
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 86 01 	call	0x30c	; 0x30c <UART_sendByte>
			UART_sendByte((uint8_t) (counter));
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 86 01 	call	0x30c	; 0x30c <UART_sendByte>
			/*LED_setValue(CH1, counter);
			LED_setValue(CH2, counter);
			LED_setValue(CH3, counter);
			LED_setValue(CH4, counter);*/
		}
		counter = counter + dir;
 27a:	c0 0f       	add	r28, r16
 27c:	d1 1f       	adc	r29, r17
		if (counter >= 200)
 27e:	c8 3c       	cpi	r28, 0xC8	; 200
 280:	d1 05       	cpc	r29, r1
 282:	64 f7       	brge	.-40     	; 0x25c <main+0x24>
		{
			dir = -1;
		}
		else if (counter <= 0x00)
 284:	1c 16       	cp	r1, r28
 286:	1d 06       	cpc	r1, r29
 288:	5c f3       	brlt	.-42     	; 0x260 <main+0x28>
		{
			dir = 1;
 28a:	0c 2d       	mov	r16, r12
 28c:	1d 2d       	mov	r17, r13
 28e:	e8 cf       	rjmp	.-48     	; 0x260 <main+0x28>

00000290 <__vector_18>:
		//_delay_ms(100);
    }
}

ISR(USART0_RX_vect)
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
	RX_IRQ();
 2b2:	0e 94 a1 01 	call	0x342	; 0x342 <RX_IRQ>
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <UART_init>:
	for (i = 0; i < length; i++)
	{
		UART_sendByte(*(pointer + i));
	}
	UART_sendByte(FRAME_DELIMITER);
}
 2d8:	f8 94       	cli
 2da:	24 98       	cbi	0x04, 4	; 4
 2dc:	23 9a       	sbi	0x04, 3	; 4
 2de:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2e2:	83 e3       	ldi	r24, 0x33	; 51
 2e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2e8:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 2ec:	e9 ec       	ldi	r30, 0xC9	; 201
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	10 82       	st	Z, r1
 2f2:	80 81       	ld	r24, Z
 2f4:	88 61       	ori	r24, 0x18	; 24
 2f6:	80 83       	st	Z, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	80 83       	st	Z, r24
 2fe:	ea ec       	ldi	r30, 0xCA	; 202
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	10 82       	st	Z, r1
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	80 83       	st	Z, r24
 308:	78 94       	sei
 30a:	08 95       	ret

0000030c <UART_sendByte>:
 30c:	e0 ec       	ldi	r30, 0xC0	; 192
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	90 81       	ld	r25, Z
 312:	95 ff       	sbrs	r25, 5
 314:	fd cf       	rjmp	.-6      	; 0x310 <UART_sendByte+0x4>
 316:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 31a:	08 95       	ret

0000031c <UART_deliverData>:
* reads the read data's first character, and decides which
* module to pass the data to.
*/
void UART_deliverData(void)
{	
	switch(receiveData[0])
 31c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <receiveData>
 320:	80 33       	cpi	r24, 0x30	; 48
 322:	71 f4       	brne	.+28     	; 0x340 <UART_deliverData+0x24>
	{
		case CHAR_0:
			// send to LED.c
			if ((receiveData[1] >= 1) && (receiveData[1] <= 4))
 324:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <receiveData+0x1>
 328:	88 23       	and	r24, r24
 32a:	51 f0       	breq	.+20     	; 0x340 <UART_deliverData+0x24>
 32c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <receiveData+0x1>
 330:	85 30       	cpi	r24, 0x05	; 5
 332:	30 f4       	brcc	.+12     	; 0x340 <UART_deliverData+0x24>
			{
				LED_setValue(receiveData[1], receiveData[2]);
 334:	e1 e0       	ldi	r30, 0x01	; 1
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	62 81       	ldd	r22, Z+2	; 0x02
 33a:	81 81       	ldd	r24, Z+1	; 0x01
 33c:	0e 94 ed 00 	call	0x1da	; 0x1da <LED_setValue>
 340:	08 95       	ret

00000342 <RX_IRQ>:
	sei();
}

void RX_IRQ(void)
{
		character = UDR1;
 342:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 346:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <character>
		if (character != FRAME_DELIMITER)
 34a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <character>
 34e:	8d 30       	cpi	r24, 0x0D	; 13
 350:	71 f0       	breq	.+28     	; 0x36e <RX_IRQ+0x2c>
		{
			buffer[counter] = character;
 352:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <character>
 35c:	ef 5e       	subi	r30, 0xEF	; 239
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	80 83       	st	Z, r24
			counter++;
 362:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 36c:	08 95       	ret
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
			{
				receiveData[i] = buffer[i];
 372:	fc 01       	movw	r30, r24
 374:	ef 5e       	subi	r30, 0xEF	; 239
 376:	fe 4f       	sbci	r31, 0xFE	; 254
 378:	20 81       	ld	r18, Z
 37a:	fc 01       	movw	r30, r24
 37c:	ef 5f       	subi	r30, 0xFF	; 255
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	20 83       	st	Z, r18
			counter++;
		}
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	80 31       	cpi	r24, 0x10	; 16
 386:	91 05       	cpc	r25, r1
 388:	a1 f7       	brne	.-24     	; 0x372 <RX_IRQ+0x30>
			{
				receiveData[i] = buffer[i];
			}
			counter = 0;
 38a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			UART_deliverData();
 38e:	0e 94 8e 01 	call	0x31c	; 0x31c <UART_deliverData>
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
