
moodlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000620  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800100  00800100  00000694  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a6  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c12  00000000  00000000  000018aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000945  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b2  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000588  00000000  00000000  00003712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_28>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a0 33       	cpi	r26, 0x30	; 48
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  d4:	0c 94 0e 03 	jmp	0x61c	; 0x61c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <alarm_init>:
void resetAlarm(void)
{
	alarmTimeSet = 0;
	alarmTimeCounter = 0;
	alarmActiveCounter = 0;
	alarmSoundOff();
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	f8 94       	cli
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	80 66       	ori	r24, 0x60	; 96
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	54 9a       	sbi	0x0a, 4	; 10
  ea:	5c 9a       	sbi	0x0b, 4	; 11
  ec:	14 bc       	out	0x24, r1	; 36
  ee:	15 bc       	out	0x25, r1	; 37
  f0:	84 b5       	in	r24, 0x24	; 36
  f2:	80 6a       	ori	r24, 0xA0	; 160
  f4:	84 bd       	out	0x24, r24	; 36
  f6:	84 b5       	in	r24, 0x24	; 36
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	84 bd       	out	0x24, r24	; 36
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	85 bd       	out	0x25, r24	; 37
 102:	8f e6       	ldi	r24, 0x6F	; 111
 104:	87 bd       	out	0x27, r24	; 39
 106:	80 e9       	ldi	r24, 0x90	; 144
 108:	88 bd       	out	0x28, r24	; 40
 10a:	c0 eb       	ldi	r28, 0xB0	; 176
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	18 82       	st	Y, r1
 110:	a1 eb       	ldi	r26, 0xB1	; 177
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	1c 92       	st	X, r1
 116:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 11a:	e0 e7       	ldi	r30, 0x70	; 112
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	10 82       	st	Z, r1
 120:	88 81       	ld	r24, Y
 122:	82 60       	ori	r24, 0x02	; 2
 124:	88 83       	st	Y, r24
 126:	8c 91       	ld	r24, X
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	8c 93       	st	X, r24
 12c:	86 e6       	ldi	r24, 0x66	; 102
 12e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
 138:	78 94       	sei
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <getAlarmTime>:
 140:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <alarmTimeSet>
 144:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <alarmTimeSet+0x1>
 148:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <alarmTimeSet+0x2>
 14c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <alarmTimeSet+0x3>
 150:	08 95       	ret

00000152 <setAlarmDuration>:
 152:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <alarmDuration+0x1>
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <alarmDuration>
 15a:	08 95       	ret

0000015c <setAlarmTime>:
 15c:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <alarmTimeSet>
 160:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <alarmTimeSet+0x1>
 164:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <alarmTimeSet+0x2>
 168:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <alarmTimeSet+0x3>
 16c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <alarmTimeCounter>
 170:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <alarmTimeCounter+0x1>
 174:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alarmTimeCounter+0x2>
 178:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <alarmTimeCounter+0x3>
 17c:	08 95       	ret

0000017e <alarmSoundOff>:
 17e:	5c 9a       	sbi	0x0b, 4	; 11
 180:	08 95       	ret

00000182 <alarmSoundOn>:
 182:	5c 98       	cbi	0x0b, 4	; 11
 184:	08 95       	ret

00000186 <TIMER2_IRQ>:
}

void TIMER2_IRQ(void)
{
	if(counter1Hz < FREQ_1HZ)
 186:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter1Hz>
 18a:	8c 34       	cpi	r24, 0x4C	; 76
 18c:	20 f4       	brcc	.+8      	; 0x196 <TIMER2_IRQ+0x10>
	{
		counter1Hz++;
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter1Hz>
 194:	08 95       	ret
	}
	else
	{
		counter1Hz = 0;
 196:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter1Hz>
		
		if(alarmTimeSet > 0)
 19a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <alarmTimeSet>
 19e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <alarmTimeSet+0x1>
 1a2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <alarmTimeSet+0x2>
 1a6:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <alarmTimeSet+0x3>
 1aa:	89 2b       	or	r24, r25
 1ac:	8a 2b       	or	r24, r26
 1ae:	8b 2b       	or	r24, r27
 1b0:	41 f1       	breq	.+80     	; 0x202 <TIMER2_IRQ+0x7c>
		{
			if(alarmTimeCounter > 0)
 1b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarmTimeCounter>
 1b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarmTimeCounter+0x1>
 1ba:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <alarmTimeCounter+0x2>
 1be:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <alarmTimeCounter+0x3>
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	a1 05       	cpc	r26, r1
 1c6:	b1 05       	cpc	r27, r1
 1c8:	61 f0       	breq	.+24     	; 0x1e2 <TIMER2_IRQ+0x5c>
			{
				alarmTimeCounter--;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	a1 09       	sbc	r26, r1
 1ce:	b1 09       	sbc	r27, r1
 1d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarmTimeCounter>
 1d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarmTimeCounter+0x1>
 1d8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <alarmTimeCounter+0x2>
 1dc:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <alarmTimeCounter+0x3>
 1e0:	10 c0       	rjmp	.+32     	; 0x202 <TIMER2_IRQ+0x7c>
			}
			else
			{
				alarmTimeSet = 0;
 1e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <alarmTimeSet>
 1e6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <alarmTimeSet+0x1>
 1ea:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <alarmTimeSet+0x2>
 1ee:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <alarmTimeSet+0x3>
				alarmActiveCounter = alarmDuration;
 1f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <alarmDuration>
 1f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <alarmDuration+0x1>
 1fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
		}
		
		if(alarmActiveCounter > 0)
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	89 f0       	breq	.+34     	; 0x230 <TIMER2_IRQ+0xaa>
		{
			if(alarmActiveCounter % 2)
 20e:	80 ff       	sbrs	r24, 0
 210:	03 c0       	rjmp	.+6      	; 0x218 <TIMER2_IRQ+0x92>
			{
				alarmSoundOn();
 212:	0e 94 c1 00 	call	0x182	; 0x182 <alarmSoundOn>
 216:	02 c0       	rjmp	.+4      	; 0x21c <TIMER2_IRQ+0x96>
			}
			else
			{
				alarmSoundOff();
 218:	0e 94 bf 00 	call	0x17e	; 0x17e <alarmSoundOff>
			}
			alarmActiveCounter--;
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 220:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 22e:	08 95       	ret
		}
		else
		{
			alarmSoundOff();
 230:	0e 94 bf 00 	call	0x17e	; 0x17e <alarmSoundOff>
 234:	08 95       	ret

00000236 <LED_initPWM>:
 236:	8a b1       	in	r24, 0x0a	; 10
 238:	87 60       	ori	r24, 0x07	; 7
 23a:	8a b9       	out	0x0a, r24	; 10
 23c:	84 b1       	in	r24, 0x04	; 4
 23e:	86 60       	ori	r24, 0x06	; 6
 240:	84 b9       	out	0x04, r24	; 4
 242:	5a 9a       	sbi	0x0b, 2	; 11
 244:	a0 e9       	ldi	r26, 0x90	; 144
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	1c 92       	st	X, r1
 24a:	e1 e9       	ldi	r30, 0x91	; 145
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	10 82       	st	Z, r1
 250:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
 254:	8c 91       	ld	r24, X
 256:	80 68       	ori	r24, 0x80	; 128
 258:	8c 93       	st	X, r24
 25a:	8c 91       	ld	r24, X
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	8c 93       	st	X, r24
 260:	80 81       	ld	r24, Z
 262:	88 61       	ori	r24, 0x18	; 24
 264:	80 83       	st	Z, r24
 266:	80 81       	ld	r24, Z
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	80 83       	st	Z, r24
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 274:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 280:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 284:	a0 e8       	ldi	r26, 0x80	; 128
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	1c 92       	st	X, r1
 28a:	e1 e8       	ldi	r30, 0x81	; 129
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	10 82       	st	Z, r1
 290:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 294:	8c 91       	ld	r24, X
 296:	80 6a       	ori	r24, 0xA0	; 160
 298:	8c 93       	st	X, r24
 29a:	8c 91       	ld	r24, X
 29c:	82 60       	ori	r24, 0x02	; 2
 29e:	8c 93       	st	X, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	88 61       	ori	r24, 0x18	; 24
 2a4:	80 83       	st	Z, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	3f e0       	ldi	r19, 0x0F	; 15
 2b0:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2b4:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 2b8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2bc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2c0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2c4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2c8:	a0 ea       	ldi	r26, 0xA0	; 160
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	1c 92       	st	X, r1
 2ce:	e1 ea       	ldi	r30, 0xA1	; 161
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	10 82       	st	Z, r1
 2d4:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
 2d8:	8c 91       	ld	r24, X
 2da:	80 6a       	ori	r24, 0xA0	; 160
 2dc:	8c 93       	st	X, r24
 2de:	8c 91       	ld	r24, X
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	8c 93       	st	X, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	88 61       	ori	r24, 0x18	; 24
 2e8:	80 83       	st	Z, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	80 83       	st	Z, r24
 2f0:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 2f4:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 2f8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 2fc:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 300:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 304:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 308:	08 95       	ret

0000030a <LED_setValue>:
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	91 f0       	breq	.+36     	; 0x332 <LED_setValue+0x28>
 30e:	18 f4       	brcc	.+6      	; 0x316 <LED_setValue+0xc>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	31 f0       	breq	.+12     	; 0x320 <LED_setValue+0x16>
 314:	08 95       	ret
 316:	83 30       	cpi	r24, 0x03	; 3
 318:	a9 f0       	breq	.+42     	; 0x344 <LED_setValue+0x3a>
 31a:	84 30       	cpi	r24, 0x04	; 4
 31c:	e1 f0       	breq	.+56     	; 0x356 <LED_setValue+0x4c>
 31e:	08 95       	ret
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	68 9f       	mul	r22, r24
 324:	b0 01       	movw	r22, r0
 326:	11 24       	eor	r1, r1
 328:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 32c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 330:	08 95       	ret
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	68 9f       	mul	r22, r24
 336:	b0 01       	movw	r22, r0
 338:	11 24       	eor	r1, r1
 33a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 33e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 342:	08 95       	ret
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	68 9f       	mul	r22, r24
 348:	b0 01       	movw	r22, r0
 34a:	11 24       	eor	r1, r1
 34c:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 350:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 354:	08 95       	ret
 356:	80 e1       	ldi	r24, 0x10	; 16
 358:	68 9f       	mul	r22, r24
 35a:	b0 01       	movw	r22, r0
 35c:	11 24       	eor	r1, r1
 35e:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 362:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 366:	08 95       	ret

00000368 <__vector_7>:
#include "Headerfiles/alarm.h"
#include "Headerfiles/UART.h"


ISR(TIMER2_COMPA_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
	TIMER2_IRQ();
 38a:	0e 94 c3 00 	call	0x186	; 0x186 <TIMER2_IRQ>
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <__vector_28>:
ISR(USART1_RX_vect)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	RX_IRQ();
 3d2:	0e 94 c7 02 	call	0x58e	; 0x58e <RX_IRQ>
}
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	bf 91       	pop	r27
 3dc:	af 91       	pop	r26
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <main>:

int main(void)
{
	alarm_init();
 3f8:	0e 94 6e 00 	call	0xdc	; 0xdc <alarm_init>
	LED_initPWM();
 3fc:	0e 94 1b 01 	call	0x236	; 0x236 <LED_initPWM>
	UART_init();
 400:	0e 94 07 02 	call	0x40e	; 0x40e <UART_init>
	
	setAlarmDuration(10);		//set duration of the alarm in seconds
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 a9 00 	call	0x152	; 0x152 <setAlarmDuration>
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

0000040e <UART_init>:


void UART_init()
{
	// disable interrupts
	cli();
 40e:	f8 94       	cli
	// configure RX as input and TX as output
	DDRB &= ~(1<<DDRB4);
 410:	24 98       	cbi	0x04, 4	; 4
	DDRB |= (1<<DDRB3);
 412:	23 9a       	sbi	0x04, 3	; 4
	// set baudrate
	UBRR1H = (uint8_t) (UART_BAUD>>8);
 414:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t) (UART_BAUD);
 418:	83 e3       	ldi	r24, 0x33	; 51
 41a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	// reset control register A
	UCSR1A = 0x0;
 41e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	// enable transmitter and receiver
	UCSR1B = 0x0;
 422:	e9 ec       	ldi	r30, 0xC9	; 201
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	10 82       	st	Z, r1
	UCSR1B |= (1<<TXEN1) | (1<<RXEN1);
 428:	80 81       	ld	r24, Z
 42a:	88 61       	ori	r24, 0x18	; 24
 42c:	80 83       	st	Z, r24
	// enable receive complete interrupt
	UCSR1B |= (1<<RXCIE1);
 42e:	80 81       	ld	r24, Z
 430:	80 68       	ori	r24, 0x80	; 128
 432:	80 83       	st	Z, r24
	// configure frame format
	// 8-bit frames, no parity, 1 stopbit
	UCSR1C = 0x0;
 434:	ea ec       	ldi	r30, 0xCA	; 202
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	10 82       	st	Z, r1
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	80 83       	st	Z, r24
	// enable interrupts
	sei();
 43e:	78 94       	sei
 440:	08 95       	ret

00000442 <UART_sendByte>:
		}
}

void UART_sendByte(uint8_t data)
{
	while (!(UCSR1A & (1<<UDRE1)));
 442:	e8 ec       	ldi	r30, 0xC8	; 200
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	90 81       	ld	r25, Z
 448:	95 ff       	sbrs	r25, 5
 44a:	fd cf       	rjmp	.-6      	; 0x446 <UART_sendByte+0x4>
	UDR1 = data;
 44c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 450:	08 95       	ret

00000452 <UART_sendBuffer>:
}

void UART_sendBuffer(uint8_t * pointer, uint8_t length)
{
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
	uint8_t i = 0;
	
	// enter for loop to send the buffer
	for (i = 0; i < length; i++)
 45a:	66 23       	and	r22, r22
 45c:	71 f0       	breq	.+28     	; 0x47a <UART_sendBuffer+0x28>
 45e:	ec 01       	movw	r28, r24
 460:	61 50       	subi	r22, 0x01	; 1
 462:	06 2f       	mov	r16, r22
 464:	10 e0       	ldi	r17, 0x00	; 0
 466:	0f 5f       	subi	r16, 0xFF	; 255
 468:	1f 4f       	sbci	r17, 0xFF	; 255
 46a:	08 0f       	add	r16, r24
 46c:	19 1f       	adc	r17, r25
	{
		UART_sendByte(*(pointer + i));
 46e:	89 91       	ld	r24, Y+
 470:	0e 94 21 02 	call	0x442	; 0x442 <UART_sendByte>
void UART_sendBuffer(uint8_t * pointer, uint8_t length)
{
	uint8_t i = 0;
	
	// enter for loop to send the buffer
	for (i = 0; i < length; i++)
 474:	c0 17       	cp	r28, r16
 476:	d1 07       	cpc	r29, r17
 478:	d1 f7       	brne	.-12     	; 0x46e <UART_sendBuffer+0x1c>
	{
		UART_sendByte(*(pointer + i));
	}
	UART_sendByte(FRAME_DELIMITER);
 47a:	8d e0       	ldi	r24, 0x0D	; 13
 47c:	0e 94 21 02 	call	0x442	; 0x442 <UART_sendByte>
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <UART_deliverData>:
/*
* reads the read data's first character, and decides which
* module to pass the data to.
*/
void UART_deliverData(void)
{	
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	27 97       	sbiw	r28, 0x07	; 7
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
	switch(receiveData[0])
 4a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <receiveData>
 4a6:	80 33       	cpi	r24, 0x30	; 48
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <UART_deliverData+0x26>
 4aa:	81 33       	cpi	r24, 0x31	; 49
 4ac:	f9 f0       	breq	.+62     	; 0x4ec <UART_deliverData+0x62>
 4ae:	64 c0       	rjmp	.+200    	; 0x578 <UART_deliverData+0xee>
	{
		case CODE_LED:
			// send to LED.c
			if (receiveData[1] == CODE_RECEIVE)
 4b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 4b4:	8e 33       	cpi	r24, 0x3E	; 62
 4b6:	b9 f4       	brne	.+46     	; 0x4e6 <UART_deliverData+0x5c>
			{
				LED_setValue(CH_RED, receiveData[2]);
 4b8:	0f e0       	ldi	r16, 0x0F	; 15
 4ba:	11 e0       	ldi	r17, 0x01	; 1
 4bc:	f8 01       	movw	r30, r16
 4be:	62 81       	ldd	r22, Z+2	; 0x02
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 85 01 	call	0x30a	; 0x30a <LED_setValue>
				LED_setValue(CH_GREEN, receiveData[3]);
 4c6:	f8 01       	movw	r30, r16
 4c8:	63 81       	ldd	r22, Z+3	; 0x03
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	0e 94 85 01 	call	0x30a	; 0x30a <LED_setValue>
				LED_setValue(CH_BLUE, receiveData[4]);
 4d0:	f8 01       	movw	r30, r16
 4d2:	64 81       	ldd	r22, Z+4	; 0x04
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	0e 94 85 01 	call	0x30a	; 0x30a <LED_setValue>
				LED_setValue(CH_WHITE, receiveData[5]);
 4da:	f8 01       	movw	r30, r16
 4dc:	65 81       	ldd	r22, Z+5	; 0x05
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	0e 94 85 01 	call	0x30a	; 0x30a <LED_setValue>
 4e4:	49 c0       	rjmp	.+146    	; 0x578 <UART_deliverData+0xee>
			}
			else if (receiveData[1] == CODE_REQUEST)
 4e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 4ea:	46 c0       	rjmp	.+140    	; 0x578 <UART_deliverData+0xee>
			}
			break;
			
		case CODE_ALARM:
			// send to Alarm.c
			if (receiveData[1] == CODE_RECEIVE)
 4ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 4f0:	8e 33       	cpi	r24, 0x3E	; 62
 4f2:	71 f5       	brne	.+92     	; 0x550 <UART_deliverData+0xc6>
			{
				uint32_t alarmtime = 0;
				alarmtime += (((uint32_t) receiveData[2]) << 24);
 4f4:	ef e0       	ldi	r30, 0x0F	; 15
 4f6:	f1 e0       	ldi	r31, 0x01	; 1
 4f8:	02 81       	ldd	r16, Z+2	; 0x02
				alarmtime += (((uint32_t) receiveData[3]) << 16);
 4fa:	93 81       	ldd	r25, Z+3	; 0x03
				alarmtime += (((uint32_t) receiveData[4]) << 8);
 4fc:	44 81       	ldd	r20, Z+4	; 0x04
				alarmtime += (((uint32_t) receiveData[5]) << 0);
 4fe:	55 81       	ldd	r21, Z+5	; 0x05
 500:	10 e0       	ldi	r17, 0x00	; 0
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	30 2f       	mov	r19, r16
 508:	22 27       	eor	r18, r18
 50a:	11 27       	eor	r17, r17
 50c:	00 27       	eor	r16, r16
 50e:	89 2f       	mov	r24, r25
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	a0 e0       	ldi	r26, 0x00	; 0
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	dc 01       	movw	r26, r24
 518:	99 27       	eor	r25, r25
 51a:	88 27       	eor	r24, r24
 51c:	80 0f       	add	r24, r16
 51e:	91 1f       	adc	r25, r17
 520:	a2 1f       	adc	r26, r18
 522:	b3 1f       	adc	r27, r19
 524:	85 0f       	add	r24, r21
 526:	91 1d       	adc	r25, r1
 528:	a1 1d       	adc	r26, r1
 52a:	b1 1d       	adc	r27, r1
				setAlarmTime(alarmtime);
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	76 2f       	mov	r23, r22
 534:	65 2f       	mov	r22, r21
 536:	54 2f       	mov	r21, r20
 538:	44 27       	eor	r20, r20
 53a:	8a 01       	movw	r16, r20
 53c:	9b 01       	movw	r18, r22
 53e:	08 0f       	add	r16, r24
 540:	19 1f       	adc	r17, r25
 542:	2a 1f       	adc	r18, r26
 544:	3b 1f       	adc	r19, r27
 546:	c9 01       	movw	r24, r18
 548:	b8 01       	movw	r22, r16
 54a:	0e 94 ae 00 	call	0x15c	; 0x15c <setAlarmTime>
 54e:	14 c0       	rjmp	.+40     	; 0x578 <UART_deliverData+0xee>
			}
			else if (receiveData[1] == CODE_REQUEST)
 550:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 554:	8c 33       	cpi	r24, 0x3C	; 60
 556:	81 f4       	brne	.+32     	; 0x578 <UART_deliverData+0xee>
			{
				uint8_t buffer[7];
				uint32_t alarmtime = getAlarmTime();
 558:	0e 94 a0 00 	call	0x140	; 0x140 <getAlarmTime>
				buffer[0] = CODE_ALARM;
 55c:	21 e3       	ldi	r18, 0x31	; 49
 55e:	29 83       	std	Y+1, r18	; 0x01
				buffer[1] = 0x00;
 560:	1a 82       	std	Y+2, r1	; 0x02
				buffer[2] = (uint8_t) ((alarmtime >> 24) & 0xFF);
 562:	9b 83       	std	Y+3, r25	; 0x03
				buffer[3] = (uint8_t) ((alarmtime >> 16) & 0xFF);
 564:	8c 83       	std	Y+4, r24	; 0x04
				buffer[4] = (uint8_t) ((alarmtime >> 8) & 0xFF);
 566:	7d 83       	std	Y+5, r23	; 0x05
				buffer[5] = (uint8_t) ((alarmtime >> 0) & 0xFF);
 568:	6e 83       	std	Y+6, r22	; 0x06
				buffer[6] = FRAME_DELIMITER;
 56a:	8d e0       	ldi	r24, 0x0D	; 13
 56c:	8f 83       	std	Y+7, r24	; 0x07
				UART_sendBuffer(buffer, sizeof(buffer));
 56e:	67 e0       	ldi	r22, 0x07	; 7
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	0e 94 29 02 	call	0x452	; 0x452 <UART_sendBuffer>
			
		default:
			// do nothing
			break;			
	}
}
 578:	27 96       	adiw	r28, 0x07	; 7
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	f8 94       	cli
 57e:	de bf       	out	0x3e, r29	; 62
 580:	0f be       	out	0x3f, r0	; 63
 582:	cd bf       	out	0x3d, r28	; 61
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <RX_IRQ>:
	sei();
}

void RX_IRQ(void)
{
		character = UDR1;
 58e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 592:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <character>
		if (((character == CODE_LED) || (character == CODE_ALARM)) && (receiving == 0))
 596:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 59a:	80 33       	cpi	r24, 0x30	; 48
 59c:	21 f0       	breq	.+8      	; 0x5a6 <RX_IRQ+0x18>
 59e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 5a2:	81 33       	cpi	r24, 0x31	; 49
 5a4:	49 f4       	brne	.+18     	; 0x5b8 <RX_IRQ+0x2a>
 5a6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <receiving>
 5aa:	81 11       	cpse	r24, r1
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <RX_IRQ+0x2a>
		{
			counter = 0;
 5ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
			receiving = 1;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <receiving>
		}
		if ((character != FRAME_DELIMITER) || (counter < MAX_MESSAGE_LEN))
 5b8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 5bc:	8d 30       	cpi	r24, 0x0D	; 13
 5be:	21 f4       	brne	.+8      	; 0x5c8 <RX_IRQ+0x3a>
 5c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 5c4:	86 30       	cpi	r24, 0x06	; 6
 5c6:	a8 f4       	brcc	.+42     	; 0x5f2 <RX_IRQ+0x64>
		{
			buffer[counter] = character;
 5c8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <counter>
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 5d2:	e1 5e       	subi	r30, 0xE1	; 225
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	80 83       	st	Z, r24
			if (counter < (BUFFER_SIZE-1))
 5d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 5dc:	8f 30       	cpi	r24, 0x0F	; 15
 5de:	30 f4       	brcc	.+12     	; 0x5ec <RX_IRQ+0x5e>
			{
				counter++;			
 5e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <counter>
 5ea:	08 95       	ret
			}
			else
			{
				counter = 0;
 5ec:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
 5f0:	08 95       	ret
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
			{
				receiveData[i] = buffer[i];
 5f6:	fc 01       	movw	r30, r24
 5f8:	e1 5e       	subi	r30, 0xE1	; 225
 5fa:	fe 4f       	sbci	r31, 0xFE	; 254
 5fc:	20 81       	ld	r18, Z
 5fe:	fc 01       	movw	r30, r24
 600:	e1 5f       	subi	r30, 0xF1	; 241
 602:	fe 4f       	sbci	r31, 0xFE	; 254
 604:	20 83       	st	Z, r18
			}
		}
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	80 31       	cpi	r24, 0x10	; 16
 60a:	91 05       	cpc	r25, r1
 60c:	a1 f7       	brne	.-24     	; 0x5f6 <RX_IRQ+0x68>
			{
				receiveData[i] = buffer[i];
			}
			counter = 0;
 60e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
			receiving = 0;
 612:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <receiving>
			UART_deliverData();
 616:	0e 94 45 02 	call	0x48a	; 0x48a <UART_deliverData>
 61a:	08 95       	ret

0000061c <_exit>:
 61c:	f8 94       	cli

0000061e <__stop_program>:
 61e:	ff cf       	rjmp	.-2      	; 0x61e <__stop_program>
