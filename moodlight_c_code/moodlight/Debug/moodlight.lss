
moodlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d68  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b19  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066a  00000000  00000000  00001d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000398  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_28>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 32       	cpi	r26, 0x23	; 35
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  d4:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <LED_initPWM>:
#define DAC_FREQ (0x1000 - 0x01)					// counter TOP value for PWM frequency of ~2kHz

void LED_initPWM(void)
{
	/* Output Configuration */
	DDRD |= (1<<DDRD0) | (1<<DDRD1) | (1<<DDRD2);	// START (T3.A) & DAC_3 (T4.A) & DAC_2 (T4.B)
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDRB1) | (1<<DDRB2);				// DAC_0 (T1.A) & DAC_1 (T1.B)
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	86 60       	ori	r24, 0x06	; 6
  e6:	84 b9       	out	0x04, r24	; 4
	PORTD |= (1<<2);								// to fix a bug on the chip
  e8:	5a 9a       	sbi	0x0b, 2	; 11
	/* START (T3.A) */
	// reset registers	
	TCCR3A = 0;
  ea:	a0 e9       	ldi	r26, 0x90	; 144
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	1c 92       	st	X, r1
	TCCR3B = 0;
  f0:	e1 e9       	ldi	r30, 0x91	; 145
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	10 82       	st	Z, r1
	TCCR3C = 0;
  f6:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
	// configure control registers
	TCCR3A |= (1<<COM3A1);							// clear on Compare Match, set at BOTTOM
  fa:	8c 91       	ld	r24, X
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);							// select Fast PWM Mode with ICR3 as TOP value
 100:	8c 91       	ld	r24, X
 102:	82 60       	ori	r24, 0x02	; 2
 104:	8c 93       	st	X, r24
	TCCR3B |= (1<<WGM33) | (1<<WGM32);				// select Fast PWM Mode with ICR3 as TOP value
 106:	80 81       	ld	r24, Z
 108:	88 61       	ori	r24, 0x18	; 24
 10a:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);							// select Prescaler = 1
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
	// set TOP and Output Compare values
	ICR3 = (uint16_t) (160-1);						// set TOP to 160 for a frequency of 50kHz
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 11a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
	OCR3A = (uint16_t) (1);							// set Outut Compare to 1 for a one clock long pulse
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 126:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	
	/* DAC_0/1 (T1.A/B) */
	// reset registers
	TCCR1A = 0;
 12a:	a0 e8       	ldi	r26, 0x80	; 128
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	1c 92       	st	X, r1
	TCCR1B = 0;
 130:	e1 e8       	ldi	r30, 0x81	; 129
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	10 82       	st	Z, r1
	TCCR1C = 0;
 136:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	// configure control registers
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1);			// set at Bottom, clear on Compare Match
 13a:	8c 91       	ld	r24, X
 13c:	80 6a       	ori	r24, 0xA0	; 160
 13e:	8c 93       	st	X, r24
	TCCR1A |= (1<<WGM11);							// select Fast PWM Mode with ICR3 as TOP value
 140:	8c 91       	ld	r24, X
 142:	82 60       	ori	r24, 0x02	; 2
 144:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12);				// select Fast PWM Mode with ICR3 as TOP value
 146:	80 81       	ld	r24, Z
 148:	88 61       	ori	r24, 0x18	; 24
 14a:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);							// select Prescaler = 1
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24
	// set TOP value
	ICR1 = (uint16_t) DAC_FREQ;
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	3f e0       	ldi	r19, 0x0F	; 15
 156:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 15a:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	// set Output Compare values
	OCR1A = (uint16_t) INIT_VALUE;
 15e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 162:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = (uint16_t) INIT_VALUE;
 166:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 16a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	
	/* DAC_2/3 (T4.A/B) */
	// reset registers
	TCCR4A = 0;
 16e:	a0 ea       	ldi	r26, 0xA0	; 160
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	1c 92       	st	X, r1
	TCCR4B = 0;
 174:	e1 ea       	ldi	r30, 0xA1	; 161
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	10 82       	st	Z, r1
	TCCR4C = 0;
 17a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	// configure control registers
	TCCR4A |= (1<<COM4A1) | (1<<COM4B1);			// set at Bottom, clear on Compare Match
 17e:	8c 91       	ld	r24, X
 180:	80 6a       	ori	r24, 0xA0	; 160
 182:	8c 93       	st	X, r24
	TCCR4A |= (1<<WGM41);							// select Fast PWM Mode with ICR3 as TOP value
 184:	8c 91       	ld	r24, X
 186:	82 60       	ori	r24, 0x02	; 2
 188:	8c 93       	st	X, r24
	TCCR4B |= (1<<WGM43) | (1<<WGM42);				// select Fast PWM Mode with ICR3 as TOP value
 18a:	80 81       	ld	r24, Z
 18c:	88 61       	ori	r24, 0x18	; 24
 18e:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS10);							// select Prescaler = 1
 190:	80 81       	ld	r24, Z
 192:	81 60       	ori	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
	// set TOP value
	ICR4 = (uint16_t) DAC_FREQ;
 196:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 19a:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	// set Output Compare values
	OCR4A = (uint16_t) INIT_VALUE;
 19e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1a2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	OCR4B = (uint16_t) INIT_VALUE;
 1a6:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 1aa:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 1ae:	08 95       	ret

000001b0 <LED_setValue>:
* set duty cycle of the PWM
* input: uint8_t as percentage from 0 to 255
*/
void LED_setValue(pwm_channel select, uint8_t value)
{
	switch(select)
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	91 f0       	breq	.+36     	; 0x1d8 <LED_setValue+0x28>
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <LED_setValue+0xc>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <LED_setValue+0x16>
 1ba:	08 95       	ret
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	a9 f0       	breq	.+42     	; 0x1ea <LED_setValue+0x3a>
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	e1 f0       	breq	.+56     	; 0x1fc <LED_setValue+0x4c>
 1c4:	08 95       	ret
	{
		case CH_RED:
			OCR1A = (((uint16_t) value) * 16);
 1c6:	80 e1       	ldi	r24, 0x10	; 16
 1c8:	68 9f       	mul	r22, r24
 1ca:	b0 01       	movw	r22, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1d2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			break;
 1d6:	08 95       	ret
		case CH_GREEN:
			OCR1B = (((uint16_t) value) * 16);
 1d8:	80 e1       	ldi	r24, 0x10	; 16
 1da:	68 9f       	mul	r22, r24
 1dc:	b0 01       	movw	r22, r0
 1de:	11 24       	eor	r1, r1
 1e0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1e4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			break;
 1e8:	08 95       	ret
		case CH_BLUE:
			OCR4B = (((uint16_t) value) * 16);
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	68 9f       	mul	r22, r24
 1ee:	b0 01       	movw	r22, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 1f6:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			break;
 1fa:	08 95       	ret
		case CH_WHITE:
			OCR4A = (((uint16_t) value) * 16);
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	68 9f       	mul	r22, r24
 200:	b0 01       	movw	r22, r0
 202:	11 24       	eor	r1, r1
 204:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 208:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 20c:	08 95       	ret

0000020e <main>:
}*/
int main(void)
{
	
	// alarm_init();
	LED_initPWM();
 20e:	0e 94 6e 00 	call	0xdc	; 0xdc <LED_initPWM>
	UART_init();
 212:	0e 94 30 01 	call	0x260	; 0x260 <UART_init>
 216:	ff cf       	rjmp	.-2      	; 0x216 <main+0x8>

00000218 <__vector_28>:
    {
		// do nothing
	}
}
ISR(USART1_RX_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
	RX_IRQ();
 23a:	0e 94 76 01 	call	0x2ec	; 0x2ec <RX_IRQ>
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <UART_init>:
	for (i = 0; i < length; i++)
	{
		UART_sendByte(*(pointer + i));
	}
	UART_sendByte(FRAME_DELIMITER);
}
 260:	f8 94       	cli
 262:	24 98       	cbi	0x04, 4	; 4
 264:	23 9a       	sbi	0x04, 3	; 4
 266:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 26a:	83 e3       	ldi	r24, 0x33	; 51
 26c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 270:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 274:	e9 ec       	ldi	r30, 0xC9	; 201
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	10 82       	st	Z, r1
 27a:	80 81       	ld	r24, Z
 27c:	88 61       	ori	r24, 0x18	; 24
 27e:	80 83       	st	Z, r24
 280:	80 81       	ld	r24, Z
 282:	80 68       	ori	r24, 0x80	; 128
 284:	80 83       	st	Z, r24
 286:	ea ec       	ldi	r30, 0xCA	; 202
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	10 82       	st	Z, r1
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	80 83       	st	Z, r24
 290:	78 94       	sei
 292:	08 95       	ret

00000294 <UART_deliverData>:
/*
* reads the read data's first character, and decides which
* module to pass the data to.
*/
void UART_deliverData(void)
{	
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
	switch(receiveData[0])
 298:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <receiveData>
 29c:	80 33       	cpi	r24, 0x30	; 48
 29e:	19 f0       	breq	.+6      	; 0x2a6 <UART_deliverData+0x12>
 2a0:	81 33       	cpi	r24, 0x31	; 49
 2a2:	d9 f0       	breq	.+54     	; 0x2da <UART_deliverData+0x46>
 2a4:	20 c0       	rjmp	.+64     	; 0x2e6 <UART_deliverData+0x52>
	{
		case CODE_LED:
			// send to LED.c
			if (receiveData[1] == CODE_RECEIVE)
 2a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receiveData+0x1>
 2aa:	8e 33       	cpi	r24, 0x3E	; 62
 2ac:	99 f4       	brne	.+38     	; 0x2d4 <UART_deliverData+0x40>
			{
				LED_setValue(CH_RED, receiveData[2]);
 2ae:	c2 e0       	ldi	r28, 0x02	; 2
 2b0:	d1 e0       	ldi	r29, 0x01	; 1
 2b2:	6a 81       	ldd	r22, Y+2	; 0x02
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_setValue>
				LED_setValue(CH_GREEN, receiveData[3]);
 2ba:	6b 81       	ldd	r22, Y+3	; 0x03
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_setValue>
				LED_setValue(CH_BLUE, receiveData[4]);
 2c2:	6c 81       	ldd	r22, Y+4	; 0x04
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_setValue>
				LED_setValue(CH_WHITE, receiveData[5]);
 2ca:	6d 81       	ldd	r22, Y+5	; 0x05
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_setValue>
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <UART_deliverData+0x52>
			}
			else if (receiveData[1] == CODE_REQUEST)
 2d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receiveData+0x1>
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <UART_deliverData+0x52>
			}
			break;
			
		case CODE_ALARM:
			// send to Alarm.c
			if (receiveData[1] == CODE_RECEIVE)
 2da:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receiveData+0x1>
 2de:	8e 33       	cpi	r24, 0x3E	; 62
 2e0:	11 f0       	breq	.+4      	; 0x2e6 <UART_deliverData+0x52>
			{
				// set Alarm time
			}
			else if (receiveData[1] == CODE_REQUEST)
 2e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receiveData+0x1>
			
		default:
			// do nothing
			break;			
	}
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <RX_IRQ>:
	sei();
}

void RX_IRQ(void)
{
		character = UDR1;
 2ec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2f0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <character>
		if (((character == CODE_LED) || (character == CODE_ALARM)) && (receiving == 0))
 2f4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <character>
 2f8:	80 33       	cpi	r24, 0x30	; 48
 2fa:	21 f0       	breq	.+8      	; 0x304 <RX_IRQ+0x18>
 2fc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <character>
 300:	81 33       	cpi	r24, 0x31	; 49
 302:	49 f4       	brne	.+18     	; 0x316 <RX_IRQ+0x2a>
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 308:	81 11       	cpse	r24, r1
 30a:	05 c0       	rjmp	.+10     	; 0x316 <RX_IRQ+0x2a>
		{
			counter = 0;
 30c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
			receiving = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		if ((character != FRAME_DELIMITER) || (counter < MAX_MESSAGE_LEN))
 316:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <character>
 31a:	8d 30       	cpi	r24, 0x0D	; 13
 31c:	21 f4       	brne	.+8      	; 0x326 <RX_IRQ+0x3a>
 31e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 322:	86 30       	cpi	r24, 0x06	; 6
 324:	a8 f4       	brcc	.+42     	; 0x350 <RX_IRQ+0x64>
		{
			buffer[counter] = character;
 326:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <counter>
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <character>
 330:	ee 5e       	subi	r30, 0xEE	; 238
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 83       	st	Z, r24
			if (counter < (BUFFER_SIZE-1))
 336:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 33a:	8f 30       	cpi	r24, 0x0F	; 15
 33c:	30 f4       	brcc	.+12     	; 0x34a <RX_IRQ+0x5e>
			{
				counter++;			
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
 348:	08 95       	ret
			}
			else
			{
				counter = 0;
 34a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
 34e:	08 95       	ret
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
			{
				receiveData[i] = buffer[i];
 354:	fc 01       	movw	r30, r24
 356:	ee 5e       	subi	r30, 0xEE	; 238
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	20 81       	ld	r18, Z
 35c:	fc 01       	movw	r30, r24
 35e:	ee 5f       	subi	r30, 0xFE	; 254
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	20 83       	st	Z, r18
			}
		}
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	80 31       	cpi	r24, 0x10	; 16
 368:	91 05       	cpc	r25, r1
 36a:	a1 f7       	brne	.-24     	; 0x354 <RX_IRQ+0x68>
			{
				receiveData[i] = buffer[i];
			}
			counter = 0;
 36c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
			receiving = 0;
 370:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			UART_deliverData();
 374:	0e 94 4a 01 	call	0x294	; 0x294 <UART_deliverData>
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
