
moodlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000522  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800100  00800100  00000596  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001031  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1f  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d4  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069a  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054e  00000000  00000000  00003512  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_28>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ae 32       	cpi	r26, 0x2E	; 46
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  d4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <alarm_init>:
/* Turns the alarm sound off*/
void resetAlarm(void)
{
	timeset = 0;
	seconds = 0;
	stopAlarmSound();
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	80 66       	ori	r24, 0x60	; 96
  e4:	8a b9       	out	0x0a, r24	; 10
  e6:	54 9a       	sbi	0x0a, 4	; 10
  e8:	5c 9a       	sbi	0x0b, 4	; 11
  ea:	14 bc       	out	0x24, r1	; 36
  ec:	15 bc       	out	0x25, r1	; 37
  ee:	84 b5       	in	r24, 0x24	; 36
  f0:	80 6a       	ori	r24, 0xA0	; 160
  f2:	84 bd       	out	0x24, r24	; 36
  f4:	84 b5       	in	r24, 0x24	; 36
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	84 bd       	out	0x24, r24	; 36
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	85 bd       	out	0x25, r24	; 37
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	87 bd       	out	0x27, r24	; 39
 104:	80 ec       	ldi	r24, 0xC0	; 192
 106:	88 bd       	out	0x28, r24	; 40
 108:	c0 eb       	ldi	r28, 0xB0	; 176
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	18 82       	st	Y, r1
 10e:	a1 eb       	ldi	r26, 0xB1	; 177
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	1c 92       	st	X, r1
 114:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 118:	e0 e7       	ldi	r30, 0x70	; 112
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
 11e:	88 81       	ld	r24, Y
 120:	82 60       	ori	r24, 0x02	; 2
 122:	88 83       	st	Y, r24
 124:	8c 91       	ld	r24, X
 126:	87 60       	ori	r24, 0x07	; 7
 128:	8c 93       	st	X, r24
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
 136:	78 94       	sei
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <setAlarmDuration>:
 13e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 146:	08 95       	ret

00000148 <setAlarmTime>:
 148:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <seconds>
 14c:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <seconds+0x1>
 150:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seconds+0x2>
 154:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <seconds+0x3>
 158:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <timeset>
 15c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <timeset+0x1>
 160:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeset+0x2>
 164:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeset+0x3>
 168:	08 95       	ret

0000016a <stopAlarmSound>:
 16a:	5c 9a       	sbi	0x0b, 4	; 11
 16c:	08 95       	ret

0000016e <startAlarmSound>:
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 172:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 176:	89 2b       	or	r24, r25
 178:	71 f0       	breq	.+28     	; 0x196 <startAlarmSound+0x28>
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	89 27       	eor	r24, r25
 180:	8b b9       	out	0x0b, r24	; 11
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 194:	08 95       	ret
 196:	0e 94 b5 00 	call	0x16a	; 0x16a <stopAlarmSound>
 19a:	08 95       	ret

0000019c <TIMER2_IRQ>:
}
void TIMER2_IRQ(void)
{
	if(herz != 76)
 19c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <herz>
 1a0:	8c 34       	cpi	r24, 0x4C	; 76
 1a2:	21 f0       	breq	.+8      	; 0x1ac <TIMER2_IRQ+0x10>
	{
		herz++;
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <herz>
 1aa:	08 95       	ret
	}
	else
	{
		herz = 0;
 1ac:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <herz>
		if(seconds == 0)
 1b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
 1b4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <seconds+0x1>
 1b8:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <seconds+0x2>
 1bc:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <seconds+0x3>
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	a1 05       	cpc	r26, r1
 1c4:	b1 05       	cpc	r27, r1
 1c6:	59 f4       	brne	.+22     	; 0x1de <TIMER2_IRQ+0x42>
		{
			startAlarmSound();
 1c8:	0e 94 b7 00 	call	0x16e	; 0x16e <startAlarmSound>
			seconds = 0;
 1cc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <seconds>
 1d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <seconds+0x1>
 1d4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <seconds+0x2>
 1d8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <seconds+0x3>
 1dc:	08 95       	ret
		}
		else
		{
			seconds--;
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	a1 09       	sbc	r26, r1
 1e2:	b1 09       	sbc	r27, r1
 1e4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
 1e8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <seconds+0x1>
 1ec:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <seconds+0x2>
 1f0:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <seconds+0x3>
 1f4:	08 95       	ret

000001f6 <LED_initPWM>:
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	87 60       	ori	r24, 0x07	; 7
 1fa:	8a b9       	out	0x0a, r24	; 10
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	86 60       	ori	r24, 0x06	; 6
 200:	84 b9       	out	0x04, r24	; 4
 202:	5a 9a       	sbi	0x0b, 2	; 11
 204:	a0 e9       	ldi	r26, 0x90	; 144
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	1c 92       	st	X, r1
 20a:	e1 e9       	ldi	r30, 0x91	; 145
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	10 82       	st	Z, r1
 210:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
 214:	8c 91       	ld	r24, X
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8c 93       	st	X, r24
 21a:	8c 91       	ld	r24, X
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8c 93       	st	X, r24
 220:	80 81       	ld	r24, Z
 222:	88 61       	ori	r24, 0x18	; 24
 224:	80 83       	st	Z, r24
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
 22c:	8f e9       	ldi	r24, 0x9F	; 159
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 234:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 240:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 244:	a0 e8       	ldi	r26, 0x80	; 128
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	1c 92       	st	X, r1
 24a:	e1 e8       	ldi	r30, 0x81	; 129
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	10 82       	st	Z, r1
 250:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 254:	8c 91       	ld	r24, X
 256:	80 6a       	ori	r24, 0xA0	; 160
 258:	8c 93       	st	X, r24
 25a:	8c 91       	ld	r24, X
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	8c 93       	st	X, r24
 260:	80 81       	ld	r24, Z
 262:	88 61       	ori	r24, 0x18	; 24
 264:	80 83       	st	Z, r24
 266:	80 81       	ld	r24, Z
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	80 83       	st	Z, r24
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	3f e0       	ldi	r19, 0x0F	; 15
 270:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 274:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 278:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 27c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 280:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 284:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 288:	a0 ea       	ldi	r26, 0xA0	; 160
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	1c 92       	st	X, r1
 28e:	e1 ea       	ldi	r30, 0xA1	; 161
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	10 82       	st	Z, r1
 294:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
 298:	8c 91       	ld	r24, X
 29a:	80 6a       	ori	r24, 0xA0	; 160
 29c:	8c 93       	st	X, r24
 29e:	8c 91       	ld	r24, X
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	8c 93       	st	X, r24
 2a4:	80 81       	ld	r24, Z
 2a6:	88 61       	ori	r24, 0x18	; 24
 2a8:	80 83       	st	Z, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	80 83       	st	Z, r24
 2b0:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 2b4:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 2b8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 2bc:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 2c0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 2c4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 2c8:	08 95       	ret

000002ca <LED_setValue>:
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	91 f0       	breq	.+36     	; 0x2f2 <LED_setValue+0x28>
 2ce:	18 f4       	brcc	.+6      	; 0x2d6 <LED_setValue+0xc>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <LED_setValue+0x16>
 2d4:	08 95       	ret
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	a9 f0       	breq	.+42     	; 0x304 <LED_setValue+0x3a>
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	e1 f0       	breq	.+56     	; 0x316 <LED_setValue+0x4c>
 2de:	08 95       	ret
 2e0:	80 e1       	ldi	r24, 0x10	; 16
 2e2:	68 9f       	mul	r22, r24
 2e4:	b0 01       	movw	r22, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ec:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2f0:	08 95       	ret
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	68 9f       	mul	r22, r24
 2f6:	b0 01       	movw	r22, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2fe:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 302:	08 95       	ret
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	68 9f       	mul	r22, r24
 308:	b0 01       	movw	r22, r0
 30a:	11 24       	eor	r1, r1
 30c:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 310:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 314:	08 95       	ret
 316:	80 e1       	ldi	r24, 0x10	; 16
 318:	68 9f       	mul	r22, r24
 31a:	b0 01       	movw	r22, r0
 31c:	11 24       	eor	r1, r1
 31e:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 322:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 326:	08 95       	ret

00000328 <__vector_7>:
#include "Headerfiles/alarm.h"
#include "Headerfiles/UART.h"


ISR(TIMER2_COMPA_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	TIMER2_IRQ();
 34a:	0e 94 ce 00 	call	0x19c	; 0x19c <TIMER2_IRQ>
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_28>:
ISR(USART1_RX_vect)
{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	RX_IRQ();
 392:	0e 94 48 02 	call	0x490	; 0x490 <RX_IRQ>
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <main>:

void main(void)
{
	alarm_init();
 3b8:	0e 94 6e 00 	call	0xdc	; 0xdc <alarm_init>
	LED_initPWM();
 3bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_initPWM>
	UART_init();
 3c0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UART_init>
	setAlarmDuration(20);		//set duration of the alarm
 3c4:	84 e1       	ldi	r24, 0x14	; 20
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 9f 00 	call	0x13e	; 0x13e <setAlarmDuration>
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <main+0x14>

000003ce <UART_init>:
	for (i = 0; i < length; i++)
	{
		UART_sendByte(*(pointer + i));
	}
	UART_sendByte(FRAME_DELIMITER);
}
 3ce:	f8 94       	cli
 3d0:	24 98       	cbi	0x04, 4	; 4
 3d2:	23 9a       	sbi	0x04, 3	; 4
 3d4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 3d8:	83 e3       	ldi	r24, 0x33	; 51
 3da:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 3de:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 3e2:	e9 ec       	ldi	r30, 0xC9	; 201
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	10 82       	st	Z, r1
 3e8:	80 81       	ld	r24, Z
 3ea:	88 61       	ori	r24, 0x18	; 24
 3ec:	80 83       	st	Z, r24
 3ee:	80 81       	ld	r24, Z
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	80 83       	st	Z, r24
 3f4:	ea ec       	ldi	r30, 0xCA	; 202
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	10 82       	st	Z, r1
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	80 83       	st	Z, r24
 3fe:	78 94       	sei
 400:	08 95       	ret

00000402 <UART_deliverData>:
/*
* reads the read data's first character, and decides which
* module to pass the data to.
*/
void UART_deliverData(void)
{	
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
	switch(receiveData[0])
 406:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <receiveData>
 40a:	80 33       	cpi	r24, 0x30	; 48
 40c:	19 f0       	breq	.+6      	; 0x414 <UART_deliverData+0x12>
 40e:	81 33       	cpi	r24, 0x31	; 49
 410:	d9 f0       	breq	.+54     	; 0x448 <UART_deliverData+0x46>
 412:	3b c0       	rjmp	.+118    	; 0x48a <UART_deliverData+0x88>
	{
		case CODE_LED:
			// send to LED.c
			if (receiveData[1] == CODE_RECEIVE)
 414:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <receiveData+0x1>
 418:	8e 33       	cpi	r24, 0x3E	; 62
 41a:	99 f4       	brne	.+38     	; 0x442 <UART_deliverData+0x40>
			{
				LED_setValue(CH_RED, receiveData[2]);
 41c:	cd e0       	ldi	r28, 0x0D	; 13
 41e:	d1 e0       	ldi	r29, 0x01	; 1
 420:	6a 81       	ldd	r22, Y+2	; 0x02
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_setValue>
				LED_setValue(CH_GREEN, receiveData[3]);
 428:	6b 81       	ldd	r22, Y+3	; 0x03
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_setValue>
				LED_setValue(CH_BLUE, receiveData[4]);
 430:	6c 81       	ldd	r22, Y+4	; 0x04
 432:	83 e0       	ldi	r24, 0x03	; 3
 434:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_setValue>
				LED_setValue(CH_WHITE, receiveData[5]);
 438:	6d 81       	ldd	r22, Y+5	; 0x05
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_setValue>
 440:	24 c0       	rjmp	.+72     	; 0x48a <UART_deliverData+0x88>
			}
			else if (receiveData[1] == CODE_REQUEST)
 442:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <receiveData+0x1>
 446:	21 c0       	rjmp	.+66     	; 0x48a <UART_deliverData+0x88>
			}
			break;
			
		case CODE_ALARM:
			// send to Alarm.c
			if (receiveData[1] == CODE_RECEIVE)
 448:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <receiveData+0x1>
 44c:	8e 33       	cpi	r24, 0x3E	; 62
 44e:	d9 f4       	brne	.+54     	; 0x486 <UART_deliverData+0x84>
			{
				uint32_t alarmtime = receiveData[2];
 450:	ed e0       	ldi	r30, 0x0D	; 13
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	22 81       	ldd	r18, Z+2	; 0x02
				uint8_t i = 0;
				for(i=0;i<3;i++)
				{
					alarmtime << 8;
					alarmtime += receiveData[3+i];
 456:	63 81       	ldd	r22, Z+3	; 0x03
 458:	86 2f       	mov	r24, r22
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	a0 e0       	ldi	r26, 0x00	; 0
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	82 0f       	add	r24, r18
 462:	91 1d       	adc	r25, r1
 464:	a1 1d       	adc	r26, r1
 466:	b1 1d       	adc	r27, r1
 468:	24 81       	ldd	r18, Z+4	; 0x04
 46a:	82 0f       	add	r24, r18
 46c:	91 1d       	adc	r25, r1
 46e:	a1 1d       	adc	r26, r1
 470:	b1 1d       	adc	r27, r1
 472:	25 81       	ldd	r18, Z+5	; 0x05
				}
				setAlarmTime(alarmtime);
 474:	bc 01       	movw	r22, r24
 476:	cd 01       	movw	r24, r26
 478:	62 0f       	add	r22, r18
 47a:	71 1d       	adc	r23, r1
 47c:	81 1d       	adc	r24, r1
 47e:	91 1d       	adc	r25, r1
 480:	0e 94 a4 00 	call	0x148	; 0x148 <setAlarmTime>
 484:	02 c0       	rjmp	.+4      	; 0x48a <UART_deliverData+0x88>
			}
			else if (receiveData[1] == CODE_REQUEST)
 486:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <receiveData+0x1>
			
		default:
			// do nothing
			break;			
	}
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <RX_IRQ>:
	sei();
}

void RX_IRQ(void)
{
		character = UDR1;
 490:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 494:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <character>
		if (((character == CODE_LED) || (character == CODE_ALARM)) && (receiving == 0))
 498:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <character>
 49c:	80 33       	cpi	r24, 0x30	; 48
 49e:	21 f0       	breq	.+8      	; 0x4a8 <RX_IRQ+0x18>
 4a0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <character>
 4a4:	81 33       	cpi	r24, 0x31	; 49
 4a6:	49 f4       	brne	.+18     	; 0x4ba <RX_IRQ+0x2a>
 4a8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <receiving>
 4ac:	81 11       	cpse	r24, r1
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <RX_IRQ+0x2a>
		{
			counter = 0;
 4b0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
			receiving = 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <receiving>
		}
		if ((character != FRAME_DELIMITER) || (counter < MAX_MESSAGE_LEN))
 4ba:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <character>
 4be:	8d 30       	cpi	r24, 0x0D	; 13
 4c0:	21 f4       	brne	.+8      	; 0x4ca <RX_IRQ+0x3a>
 4c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 4c6:	86 30       	cpi	r24, 0x06	; 6
 4c8:	a8 f4       	brcc	.+42     	; 0x4f4 <RX_IRQ+0x64>
		{
			buffer[counter] = character;
 4ca:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <counter>
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <character>
 4d4:	e3 5e       	subi	r30, 0xE3	; 227
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	80 83       	st	Z, r24
			if (counter < (BUFFER_SIZE-1))
 4da:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 4de:	8f 30       	cpi	r24, 0x0F	; 15
 4e0:	30 f4       	brcc	.+12     	; 0x4ee <RX_IRQ+0x5e>
			{
				counter++;			
 4e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 4e6:	8f 5f       	subi	r24, 0xFF	; 255
 4e8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter>
 4ec:	08 95       	ret
			}
			else
			{
				counter = 0;
 4ee:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
 4f2:	08 95       	ret
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
			{
				receiveData[i] = buffer[i];
 4f8:	fc 01       	movw	r30, r24
 4fa:	e3 5e       	subi	r30, 0xE3	; 227
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	20 81       	ld	r18, Z
 500:	fc 01       	movw	r30, r24
 502:	e3 5f       	subi	r30, 0xF3	; 243
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	20 83       	st	Z, r18
			}
		}
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	80 31       	cpi	r24, 0x10	; 16
 50c:	91 05       	cpc	r25, r1
 50e:	a1 f7       	brne	.-24     	; 0x4f8 <RX_IRQ+0x68>
			{
				receiveData[i] = buffer[i];
			}
			counter = 0;
 510:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
			receiving = 0;
 514:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <receiving>
			UART_deliverData();
 518:	0e 94 01 02 	call	0x402	; 0x402 <UART_deliverData>
 51c:	08 95       	ret

0000051e <_exit>:
 51e:	f8 94       	cli

00000520 <__stop_program>:
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stop_program>
