
moodlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800100  00800100  00000698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a0  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1f  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093f  00000000  00000000  000024c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b5  00000000  00000000  000036a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003c56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_28>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a0 33       	cpi	r26, 0x30	; 48
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
  d4:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <alarm_init>:
/* Turns the alarm sound off*/
void resetAlarm(void)
{
	timeset = 0;
	seconds = 0;
	stopAlarmSound();
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	f8 94       	cli
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	80 66       	ori	r24, 0x60	; 96
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	54 9a       	sbi	0x0a, 4	; 10
  ea:	5c 9a       	sbi	0x0b, 4	; 11
  ec:	14 bc       	out	0x24, r1	; 36
  ee:	15 bc       	out	0x25, r1	; 37
  f0:	84 b5       	in	r24, 0x24	; 36
  f2:	80 6a       	ori	r24, 0xA0	; 160
  f4:	84 bd       	out	0x24, r24	; 36
  f6:	84 b5       	in	r24, 0x24	; 36
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	84 bd       	out	0x24, r24	; 36
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	85 bd       	out	0x25, r24	; 37
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	87 bd       	out	0x27, r24	; 39
 106:	80 ec       	ldi	r24, 0xC0	; 192
 108:	88 bd       	out	0x28, r24	; 40
 10a:	c0 eb       	ldi	r28, 0xB0	; 176
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	18 82       	st	Y, r1
 110:	a1 eb       	ldi	r26, 0xB1	; 177
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	1c 92       	st	X, r1
 116:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 11a:	e0 e7       	ldi	r30, 0x70	; 112
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	10 82       	st	Z, r1
 120:	88 81       	ld	r24, Y
 122:	82 60       	ori	r24, 0x02	; 2
 124:	88 83       	st	Y, r24
 126:	8c 91       	ld	r24, X
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	8c 93       	st	X, r24
 12c:	86 e6       	ldi	r24, 0x66	; 102
 12e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
 138:	78 94       	sei
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <getAlarmTime>:
 140:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <timeset>
 144:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <timeset+0x1>
 148:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timeset+0x2>
 14c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timeset+0x3>
 150:	08 95       	ret

00000152 <setAlarmDuration>:
 152:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <alarmDuration+0x1>
 156:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <alarmDuration>
 15a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <activeCounter+0x1>
 15e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <activeCounter>
 162:	08 95       	ret

00000164 <setAlarmTime>:
 164:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 168:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 16c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 170:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 174:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <timeset>
 178:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <timeset+0x1>
 17c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timeset+0x2>
 180:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timeset+0x3>
 184:	08 95       	ret

00000186 <stopAlarmSound>:
 186:	5c 9a       	sbi	0x0b, 4	; 11
 188:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <alarmDuration>
 18c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <alarmDuration+0x1>
 190:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <activeCounter+0x1>
 194:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <activeCounter>
 198:	08 95       	ret

0000019a <AlarmSound>:
 19a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeCounter>
 19e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeCounter+0x1>
 1a2:	89 2b       	or	r24, r25
 1a4:	71 f0       	breq	.+28     	; 0x1c2 <AlarmSound+0x28>
 1a6:	9b b1       	in	r25, 0x0b	; 11
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	89 27       	eor	r24, r25
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeCounter>
 1b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeCounter+0x1>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <activeCounter+0x1>
 1bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <activeCounter>
 1c0:	08 95       	ret
 1c2:	0e 94 c3 00 	call	0x186	; 0x186 <stopAlarmSound>
 1c6:	08 95       	ret

000001c8 <TIMER2_IRQ>:
}
void TIMER2_IRQ(void)
{
	if(herz != 76)
 1c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <herz>
 1cc:	8c 34       	cpi	r24, 0x4C	; 76
 1ce:	21 f0       	breq	.+8      	; 0x1d8 <TIMER2_IRQ+0x10>
	{
		herz++;
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <herz>
 1d6:	08 95       	ret
	}
	else
	{
		herz = 0;
 1d8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <herz>
		if(seconds == 0 && timeset != 0)
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 1e8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	a1 05       	cpc	r26, r1
 1f0:	b1 05       	cpc	r27, r1
 1f2:	b9 f4       	brne	.+46     	; 0x222 <TIMER2_IRQ+0x5a>
 1f4:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <timeset>
 1f8:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <timeset+0x1>
 1fc:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <timeset+0x2>
 200:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <timeset+0x3>
 204:	45 2b       	or	r20, r21
 206:	46 2b       	or	r20, r22
 208:	47 2b       	or	r20, r23
 20a:	59 f0       	breq	.+22     	; 0x222 <TIMER2_IRQ+0x5a>
		{
			AlarmSound();
 20c:	0e 94 cd 00 	call	0x19a	; 0x19a <AlarmSound>
			seconds = 0;
 210:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 214:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 218:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 21c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 220:	08 95       	ret
		}
		else
		{
			seconds--;
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	a1 09       	sbc	r26, r1
 226:	b1 09       	sbc	r27, r1
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 22c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 230:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 234:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 238:	08 95       	ret

0000023a <LED_initPWM>:
#define DAC_FREQ (0x1000 - 0x01)					// counter TOP value for PWM frequency of ~2kHz

void LED_initPWM(void)
{
	/* Output Configuration */
	DDRD |= (1<<DDRD0) | (1<<DDRD1) | (1<<DDRD2);	// START (T3.A) & DAC_3 (T4.A) & DAC_2 (T4.B)
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	87 60       	ori	r24, 0x07	; 7
 23e:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DDRB1) | (1<<DDRB2);				// DAC_0 (T1.A) & DAC_1 (T1.B)
 240:	84 b1       	in	r24, 0x04	; 4
 242:	86 60       	ori	r24, 0x06	; 6
 244:	84 b9       	out	0x04, r24	; 4
	PORTD |= (1<<2);								// to fix a bug on the chip
 246:	5a 9a       	sbi	0x0b, 2	; 11
	/* START (T3.A) */
	// reset registers	
	TCCR3A = 0;
 248:	a0 e9       	ldi	r26, 0x90	; 144
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	1c 92       	st	X, r1
	TCCR3B = 0;
 24e:	e1 e9       	ldi	r30, 0x91	; 145
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	10 82       	st	Z, r1
	TCCR3C = 0;
 254:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
	// configure control registers
	TCCR3A |= (1<<COM3A1);							// clear on Compare Match, set at BOTTOM
 258:	8c 91       	ld	r24, X
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	8c 93       	st	X, r24
	TCCR3A |= (1<<WGM31);							// select Fast PWM Mode with ICR3 as TOP value
 25e:	8c 91       	ld	r24, X
 260:	82 60       	ori	r24, 0x02	; 2
 262:	8c 93       	st	X, r24
	TCCR3B |= (1<<WGM33) | (1<<WGM32);				// select Fast PWM Mode with ICR3 as TOP value
 264:	80 81       	ld	r24, Z
 266:	88 61       	ori	r24, 0x18	; 24
 268:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS30);							// select Prescaler = 1
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24
	// set TOP and Output Compare values
	ICR3 = (uint16_t) (160-1);						// set TOP to 160 for a frequency of 50kHz
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 278:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
	OCR3A = (uint16_t) (1);							// set Outut Compare to 1 for a one clock long pulse
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 284:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	
	/* DAC_0/1 (T1.A/B) */
	// reset registers
	TCCR1A = 0;
 288:	a0 e8       	ldi	r26, 0x80	; 128
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	1c 92       	st	X, r1
	TCCR1B = 0;
 28e:	e1 e8       	ldi	r30, 0x81	; 129
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	10 82       	st	Z, r1
	TCCR1C = 0;
 294:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	// configure control registers
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1);			// set at Bottom, clear on Compare Match
 298:	8c 91       	ld	r24, X
 29a:	80 6a       	ori	r24, 0xA0	; 160
 29c:	8c 93       	st	X, r24
	TCCR1A |= (1<<WGM11);							// select Fast PWM Mode with ICR3 as TOP value
 29e:	8c 91       	ld	r24, X
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12);				// select Fast PWM Mode with ICR3 as TOP value
 2a4:	80 81       	ld	r24, Z
 2a6:	88 61       	ori	r24, 0x18	; 24
 2a8:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);							// select Prescaler = 1
 2aa:	80 81       	ld	r24, Z
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	80 83       	st	Z, r24
	// set TOP value
	ICR1 = (uint16_t) DAC_FREQ;
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	3f e0       	ldi	r19, 0x0F	; 15
 2b4:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2b8:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	// set Output Compare values
	OCR1A = (uint16_t) INIT_VALUE;
 2bc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = (uint16_t) INIT_VALUE;
 2c4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2c8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	
	/* DAC_2/3 (T4.A/B) */
	// reset registers
	TCCR4A = 0;
 2cc:	a0 ea       	ldi	r26, 0xA0	; 160
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	1c 92       	st	X, r1
	TCCR4B = 0;
 2d2:	e1 ea       	ldi	r30, 0xA1	; 161
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	10 82       	st	Z, r1
	TCCR4C = 0;
 2d8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7e00a2>
	// configure control registers
	TCCR4A |= (1<<COM4A1) | (1<<COM4B1);			// set at Bottom, clear on Compare Match
 2dc:	8c 91       	ld	r24, X
 2de:	80 6a       	ori	r24, 0xA0	; 160
 2e0:	8c 93       	st	X, r24
	TCCR4A |= (1<<WGM41);							// select Fast PWM Mode with ICR3 as TOP value
 2e2:	8c 91       	ld	r24, X
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	8c 93       	st	X, r24
	TCCR4B |= (1<<WGM43) | (1<<WGM42);				// select Fast PWM Mode with ICR3 as TOP value
 2e8:	80 81       	ld	r24, Z
 2ea:	88 61       	ori	r24, 0x18	; 24
 2ec:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS10);							// select Prescaler = 1
 2ee:	80 81       	ld	r24, Z
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	80 83       	st	Z, r24
	// set TOP value
	ICR4 = (uint16_t) DAC_FREQ;
 2f4:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 2f8:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
	// set Output Compare values
	OCR4A = (uint16_t) INIT_VALUE;
 2fc:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 300:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
	OCR4B = (uint16_t) INIT_VALUE;
 304:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 308:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 30c:	08 95       	ret

0000030e <LED_setValue>:
* set duty cycle of the PWM
* input: uint8_t as percentage from 0 to 255
*/
void LED_setValue(pwm_channel select, uint8_t value)
{
	switch(select)
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	91 f0       	breq	.+36     	; 0x336 <LED_setValue+0x28>
 312:	18 f4       	brcc	.+6      	; 0x31a <LED_setValue+0xc>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	31 f0       	breq	.+12     	; 0x324 <LED_setValue+0x16>
 318:	08 95       	ret
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	a9 f0       	breq	.+42     	; 0x348 <LED_setValue+0x3a>
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	e1 f0       	breq	.+56     	; 0x35a <LED_setValue+0x4c>
 322:	08 95       	ret
	{
		case CH_RED:
			OCR1A = (((uint16_t) value) * 16);
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	68 9f       	mul	r22, r24
 328:	b0 01       	movw	r22, r0
 32a:	11 24       	eor	r1, r1
 32c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 330:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			break;
 334:	08 95       	ret
		case CH_GREEN:
			OCR1B = (((uint16_t) value) * 16);
 336:	80 e1       	ldi	r24, 0x10	; 16
 338:	68 9f       	mul	r22, r24
 33a:	b0 01       	movw	r22, r0
 33c:	11 24       	eor	r1, r1
 33e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 342:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
			break;
 346:	08 95       	ret
		case CH_BLUE:
			OCR4B = (((uint16_t) value) * 16);
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	68 9f       	mul	r22, r24
 34c:	b0 01       	movw	r22, r0
 34e:	11 24       	eor	r1, r1
 350:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 354:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
			break;
 358:	08 95       	ret
		case CH_WHITE:
			OCR4A = (((uint16_t) value) * 16);
 35a:	80 e1       	ldi	r24, 0x10	; 16
 35c:	68 9f       	mul	r22, r24
 35e:	b0 01       	movw	r22, r0
 360:	11 24       	eor	r1, r1
 362:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 366:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
 36a:	08 95       	ret

0000036c <__vector_7>:
#include "Headerfiles/alarm.h"
#include "Headerfiles/UART.h"


ISR(TIMER2_COMPA_vect)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	TIMER2_IRQ();
 38e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TIMER2_IRQ>
}
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_28>:
ISR(USART1_RX_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	RX_IRQ();
 3d6:	0e 94 c9 02 	call	0x592	; 0x592 <RX_IRQ>
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <main>:

void main(void)
{
	alarm_init();
 3fc:	0e 94 6e 00 	call	0xdc	; 0xdc <alarm_init>
	LED_initPWM();
 400:	0e 94 1d 01 	call	0x23a	; 0x23a <LED_initPWM>
	UART_init();
 404:	0e 94 09 02 	call	0x412	; 0x412 <UART_init>
	
	setAlarmDuration(20);		//set duration of the alarm in seconds
 408:	84 e1       	ldi	r24, 0x14	; 20
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 a9 00 	call	0x152	; 0x152 <setAlarmDuration>
 410:	ff cf       	rjmp	.-2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

00000412 <UART_init>:


void UART_init()
{
	// disable interrupts
	cli();
 412:	f8 94       	cli
	// configure RX as input and TX as output
	DDRB &= ~(1<<DDRB4);
 414:	24 98       	cbi	0x04, 4	; 4
	DDRB |= (1<<DDRB3);
 416:	23 9a       	sbi	0x04, 3	; 4
	// set baudrate
	UBRR1H = (uint8_t) (UART_BAUD>>8);
 418:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t) (UART_BAUD);
 41c:	83 e3       	ldi	r24, 0x33	; 51
 41e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	// reset control register A
	UCSR1A = 0x0;
 422:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	// enable transmitter and receiver
	UCSR1B = 0x0;
 426:	e9 ec       	ldi	r30, 0xC9	; 201
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	10 82       	st	Z, r1
	UCSR1B |= (1<<TXEN1) | (1<<RXEN1);
 42c:	80 81       	ld	r24, Z
 42e:	88 61       	ori	r24, 0x18	; 24
 430:	80 83       	st	Z, r24
	// enable receive complete interrupt
	UCSR1B |= (1<<RXCIE1);
 432:	80 81       	ld	r24, Z
 434:	80 68       	ori	r24, 0x80	; 128
 436:	80 83       	st	Z, r24
	// configure frame format
	// 8-bit frames, no parity, 1 stopbit
	UCSR1C = 0x0;
 438:	ea ec       	ldi	r30, 0xCA	; 202
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	10 82       	st	Z, r1
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
 43e:	86 e0       	ldi	r24, 0x06	; 6
 440:	80 83       	st	Z, r24
	// enable interrupts
	sei();
 442:	78 94       	sei
 444:	08 95       	ret

00000446 <UART_sendByte>:
		}
}

void UART_sendByte(uint8_t data)
{
	while (!(UCSR1A & (1<<UDRE1)));
 446:	e8 ec       	ldi	r30, 0xC8	; 200
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	90 81       	ld	r25, Z
 44c:	95 ff       	sbrs	r25, 5
 44e:	fd cf       	rjmp	.-6      	; 0x44a <UART_sendByte+0x4>
	UDR1 = data;
 450:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 454:	08 95       	ret

00000456 <UART_sendBuffer>:
}

void UART_sendBuffer(uint8_t * pointer, uint8_t length)
{
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
	uint8_t i = 0;
	
	// enter for loop to send the buffer
	for (i = 0; i < length; i++)
 45e:	66 23       	and	r22, r22
 460:	71 f0       	breq	.+28     	; 0x47e <UART_sendBuffer+0x28>
 462:	ec 01       	movw	r28, r24
 464:	61 50       	subi	r22, 0x01	; 1
 466:	06 2f       	mov	r16, r22
 468:	10 e0       	ldi	r17, 0x00	; 0
 46a:	0f 5f       	subi	r16, 0xFF	; 255
 46c:	1f 4f       	sbci	r17, 0xFF	; 255
 46e:	08 0f       	add	r16, r24
 470:	19 1f       	adc	r17, r25
	{
		UART_sendByte(*(pointer + i));
 472:	89 91       	ld	r24, Y+
 474:	0e 94 23 02 	call	0x446	; 0x446 <UART_sendByte>
void UART_sendBuffer(uint8_t * pointer, uint8_t length)
{
	uint8_t i = 0;
	
	// enter for loop to send the buffer
	for (i = 0; i < length; i++)
 478:	c0 17       	cp	r28, r16
 47a:	d1 07       	cpc	r29, r17
 47c:	d1 f7       	brne	.-12     	; 0x472 <UART_sendBuffer+0x1c>
	{
		UART_sendByte(*(pointer + i));
	}
	UART_sendByte(FRAME_DELIMITER);
 47e:	8d e0       	ldi	r24, 0x0D	; 13
 480:	0e 94 23 02 	call	0x446	; 0x446 <UART_sendByte>
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	08 95       	ret

0000048e <UART_deliverData>:
/*
* reads the read data's first character, and decides which
* module to pass the data to.
*/
void UART_deliverData(void)
{	
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	27 97       	sbiw	r28, 0x07	; 7
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
	switch(receiveData[0])
 4a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <receiveData>
 4aa:	80 33       	cpi	r24, 0x30	; 48
 4ac:	19 f0       	breq	.+6      	; 0x4b4 <UART_deliverData+0x26>
 4ae:	81 33       	cpi	r24, 0x31	; 49
 4b0:	f9 f0       	breq	.+62     	; 0x4f0 <UART_deliverData+0x62>
 4b2:	64 c0       	rjmp	.+200    	; 0x57c <UART_deliverData+0xee>
	{
		case CODE_LED:
			// send to LED.c
			if (receiveData[1] == CODE_RECEIVE)
 4b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 4b8:	8e 33       	cpi	r24, 0x3E	; 62
 4ba:	b9 f4       	brne	.+46     	; 0x4ea <UART_deliverData+0x5c>
			{
				LED_setValue(CH_RED, receiveData[2]);
 4bc:	0f e0       	ldi	r16, 0x0F	; 15
 4be:	11 e0       	ldi	r17, 0x01	; 1
 4c0:	f8 01       	movw	r30, r16
 4c2:	62 81       	ldd	r22, Z+2	; 0x02
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 87 01 	call	0x30e	; 0x30e <LED_setValue>
				LED_setValue(CH_GREEN, receiveData[3]);
 4ca:	f8 01       	movw	r30, r16
 4cc:	63 81       	ldd	r22, Z+3	; 0x03
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	0e 94 87 01 	call	0x30e	; 0x30e <LED_setValue>
				LED_setValue(CH_BLUE, receiveData[4]);
 4d4:	f8 01       	movw	r30, r16
 4d6:	64 81       	ldd	r22, Z+4	; 0x04
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	0e 94 87 01 	call	0x30e	; 0x30e <LED_setValue>
				LED_setValue(CH_WHITE, receiveData[5]);
 4de:	f8 01       	movw	r30, r16
 4e0:	65 81       	ldd	r22, Z+5	; 0x05
 4e2:	84 e0       	ldi	r24, 0x04	; 4
 4e4:	0e 94 87 01 	call	0x30e	; 0x30e <LED_setValue>
 4e8:	49 c0       	rjmp	.+146    	; 0x57c <UART_deliverData+0xee>
			}
			else if (receiveData[1] == CODE_REQUEST)
 4ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 4ee:	46 c0       	rjmp	.+140    	; 0x57c <UART_deliverData+0xee>
			}
			break;
			
		case CODE_ALARM:
			// send to Alarm.c
			if (receiveData[1] == CODE_RECEIVE)
 4f0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 4f4:	8e 33       	cpi	r24, 0x3E	; 62
 4f6:	71 f5       	brne	.+92     	; 0x554 <UART_deliverData+0xc6>
			{
				uint32_t alarmtime = 0;
				alarmtime += (((uint32_t) receiveData[2]) << 24);
 4f8:	ef e0       	ldi	r30, 0x0F	; 15
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	02 81       	ldd	r16, Z+2	; 0x02
				alarmtime += (((uint32_t) receiveData[3]) << 16);
 4fe:	93 81       	ldd	r25, Z+3	; 0x03
				alarmtime += (((uint32_t) receiveData[4]) << 8);
 500:	44 81       	ldd	r20, Z+4	; 0x04
				alarmtime += (((uint32_t) receiveData[5]) << 0);
 502:	55 81       	ldd	r21, Z+5	; 0x05
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	30 2f       	mov	r19, r16
 50c:	22 27       	eor	r18, r18
 50e:	11 27       	eor	r17, r17
 510:	00 27       	eor	r16, r16
 512:	89 2f       	mov	r24, r25
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	a0 e0       	ldi	r26, 0x00	; 0
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	dc 01       	movw	r26, r24
 51c:	99 27       	eor	r25, r25
 51e:	88 27       	eor	r24, r24
 520:	80 0f       	add	r24, r16
 522:	91 1f       	adc	r25, r17
 524:	a2 1f       	adc	r26, r18
 526:	b3 1f       	adc	r27, r19
 528:	85 0f       	add	r24, r21
 52a:	91 1d       	adc	r25, r1
 52c:	a1 1d       	adc	r26, r1
 52e:	b1 1d       	adc	r27, r1
				setAlarmTime(alarmtime);
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	76 2f       	mov	r23, r22
 538:	65 2f       	mov	r22, r21
 53a:	54 2f       	mov	r21, r20
 53c:	44 27       	eor	r20, r20
 53e:	8a 01       	movw	r16, r20
 540:	9b 01       	movw	r18, r22
 542:	08 0f       	add	r16, r24
 544:	19 1f       	adc	r17, r25
 546:	2a 1f       	adc	r18, r26
 548:	3b 1f       	adc	r19, r27
 54a:	c9 01       	movw	r24, r18
 54c:	b8 01       	movw	r22, r16
 54e:	0e 94 b2 00 	call	0x164	; 0x164 <setAlarmTime>
 552:	14 c0       	rjmp	.+40     	; 0x57c <UART_deliverData+0xee>
			}
			else if (receiveData[1] == CODE_REQUEST)
 554:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <receiveData+0x1>
 558:	8c 33       	cpi	r24, 0x3C	; 60
 55a:	81 f4       	brne	.+32     	; 0x57c <UART_deliverData+0xee>
			{
				uint8_t buffer[7];
				uint32_t alarmtime = getAlarmTime();
 55c:	0e 94 a0 00 	call	0x140	; 0x140 <getAlarmTime>
				buffer[0] = CODE_ALARM;
 560:	21 e3       	ldi	r18, 0x31	; 49
 562:	29 83       	std	Y+1, r18	; 0x01
				buffer[1] = 0x00;
 564:	1a 82       	std	Y+2, r1	; 0x02
				buffer[2] = (uint8_t) ((alarmtime >> 24) & 0xFF);
 566:	9b 83       	std	Y+3, r25	; 0x03
				buffer[3] = (uint8_t) ((alarmtime >> 16) & 0xFF);
 568:	8c 83       	std	Y+4, r24	; 0x04
				buffer[4] = (uint8_t) ((alarmtime >> 8) & 0xFF);
 56a:	7d 83       	std	Y+5, r23	; 0x05
				buffer[5] = (uint8_t) ((alarmtime >> 0) & 0xFF);
 56c:	6e 83       	std	Y+6, r22	; 0x06
				buffer[6] = FRAME_DELIMITER;
 56e:	8d e0       	ldi	r24, 0x0D	; 13
 570:	8f 83       	std	Y+7, r24	; 0x07
				UART_sendBuffer(buffer, sizeof(buffer));
 572:	67 e0       	ldi	r22, 0x07	; 7
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	0e 94 2b 02 	call	0x456	; 0x456 <UART_sendBuffer>
			
		default:
			// do nothing
			break;			
	}
}
 57c:	27 96       	adiw	r28, 0x07	; 7
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <RX_IRQ>:
	sei();
}

void RX_IRQ(void)
{
		character = UDR1;
 592:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 596:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <character>
		if (((character == CODE_LED) || (character == CODE_ALARM)) && (receiving == 0))
 59a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 59e:	80 33       	cpi	r24, 0x30	; 48
 5a0:	21 f0       	breq	.+8      	; 0x5aa <RX_IRQ+0x18>
 5a2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 5a6:	81 33       	cpi	r24, 0x31	; 49
 5a8:	49 f4       	brne	.+18     	; 0x5bc <RX_IRQ+0x2a>
 5aa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <receiving>
 5ae:	81 11       	cpse	r24, r1
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <RX_IRQ+0x2a>
		{
			counter = 0;
 5b2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
			receiving = 1;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <receiving>
		}
		if ((character != FRAME_DELIMITER) || (counter < MAX_MESSAGE_LEN))
 5bc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 5c0:	8d 30       	cpi	r24, 0x0D	; 13
 5c2:	21 f4       	brne	.+8      	; 0x5cc <RX_IRQ+0x3a>
 5c4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 5c8:	86 30       	cpi	r24, 0x06	; 6
 5ca:	a8 f4       	brcc	.+42     	; 0x5f6 <RX_IRQ+0x64>
		{
			buffer[counter] = character;
 5cc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <counter>
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <character>
 5d6:	e1 5e       	subi	r30, 0xE1	; 225
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	80 83       	st	Z, r24
			if (counter < (BUFFER_SIZE-1))
 5dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 5e0:	8f 30       	cpi	r24, 0x0F	; 15
 5e2:	30 f4       	brcc	.+12     	; 0x5f0 <RX_IRQ+0x5e>
			{
				counter++;			
 5e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 5e8:	8f 5f       	subi	r24, 0xFF	; 255
 5ea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <counter>
 5ee:	08 95       	ret
			}
			else
			{
				counter = 0;
 5f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
 5f4:	08 95       	ret
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
			{
				receiveData[i] = buffer[i];
 5fa:	fc 01       	movw	r30, r24
 5fc:	e1 5e       	subi	r30, 0xE1	; 225
 5fe:	fe 4f       	sbci	r31, 0xFE	; 254
 600:	20 81       	ld	r18, Z
 602:	fc 01       	movw	r30, r24
 604:	e1 5f       	subi	r30, 0xF1	; 241
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	20 83       	st	Z, r18
			}
		}
		else
		{
			int i;
			for (i = 0; i < BUFFER_SIZE; i++)
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	80 31       	cpi	r24, 0x10	; 16
 60e:	91 05       	cpc	r25, r1
 610:	a1 f7       	brne	.-24     	; 0x5fa <RX_IRQ+0x68>
			{
				receiveData[i] = buffer[i];
			}
			counter = 0;
 612:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
			receiving = 0;
 616:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <receiving>
			UART_deliverData();
 61a:	0e 94 47 02 	call	0x48e	; 0x48e <UART_deliverData>
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
